[
    {
        "id": "d9aefffefeeb23ae",
        "type": "tab",
        "label": "Arduino Serial",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "638ad1f5c0f9d4e9",
        "type": "subflow",
        "name": "opcua-handler",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 900,
                "wires": [
                    {
                        "id": "28b46aacce6ba8bb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 500,
                "wires": [
                    {
                        "id": "6fc12c0c22e71e34",
                        "port": 0
                    },
                    {
                        "id": "8a7fb8cdaea4552e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "SERVER_HOST",
                "type": "str",
                "value": "localhost",
                "ui": {
                    "icon": "font-awesome/fa-address-card-o",
                    "label": {
                        "en-US": "Server Host"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "SERVER_PORT",
                "type": "num",
                "value": "4840",
                "ui": {
                    "icon": "font-awesome/fa-hashtag",
                    "label": {
                        "en-US": "Server Port"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "SEC_POLICY",
                "type": "str",
                "value": "None",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Security Policy"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "None"
                                },
                                "v": "None"
                            },
                            {
                                "l": {
                                    "en-US": "Basic128"
                                },
                                "v": "Basic128"
                            },
                            {
                                "l": {
                                    "en-US": "Basic128Rsa15"
                                },
                                "v": "Basic128Rsa15"
                            },
                            {
                                "l": {
                                    "en-US": "Basic192"
                                },
                                "v": "Basic192"
                            },
                            {
                                "l": {
                                    "en-US": "Basic192Rsa15"
                                },
                                "v": "Basic192Rsa15"
                            },
                            {
                                "l": {
                                    "en-US": "Basic256"
                                },
                                "v": "Basic256"
                            },
                            {
                                "l": {
                                    "en-US": "Basic256Rsa15"
                                },
                                "v": "Basic256Rsa15"
                            },
                            {
                                "l": {
                                    "en-US": "Basic256Sha256"
                                },
                                "v": "Basic256Sha256"
                            }
                        ]
                    }
                }
            },
            {
                "name": "SEC_MODE",
                "type": "str",
                "value": "NONE",
                "ui": {
                    "icon": "font-awesome/fa-user-secret",
                    "label": {
                        "en-US": "Security Mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "None"
                                },
                                "v": "NONE"
                            },
                            {
                                "l": {
                                    "en-US": "Sign"
                                },
                                "v": "SIGN"
                            },
                            {
                                "l": {
                                    "en-US": "Sign&Encrypt"
                                },
                                "v": "SIGNANDENCRYPT"
                            }
                        ]
                    }
                }
            },
            {
                "name": "PUB_INTERVAL",
                "type": "num",
                "value": "1000",
                "ui": {
                    "icon": "font-awesome/fa-upload",
                    "label": {
                        "en-US": "Publish Interval"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "REFRESH_INTERVAL",
                "type": "num",
                "value": "500",
                "ui": {
                    "icon": "font-awesome/fa-refresh",
                    "label": {
                        "en-US": "Refresh Interval"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "NODES",
                "type": "json",
                "value": "[{\"name\":\"Example\",\"nodeId\":\"ns=2;s=example\",\"datatypeName\":\"Double\"},{\"name\":\"Example2\",\"nodeId\":\"ns=2;s=example2\",\"datatypeName\":\"Boolean\"}]",
                "ui": {
                    "icon": "font-awesome/fa-id-badge",
                    "label": {
                        "en-US": "Nodes"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            }
        ],
        "color": "#DDAA99",
        "status": {
            "x": 840,
            "y": 1060,
            "wires": [
                {
                    "id": "2c47be2406a5bcaa",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "339fb0e9074090d2",
        "type": "mqtt-broker",
        "name": " broker.hivemq.com",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5afc28839902735d",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "0d63468ff34042f5",
        "type": "mqtt-broker",
        "name": "HIVE MQ",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "db250659a0cdf920",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "37bccea6f2f03d08",
        "type": "OPCUA-IIoT-Connector",
        "discoveryUrl": "",
        "endpoint": "opc.tcp://localhost:55388/",
        "keepSessionAlive": true,
        "loginEnabled": false,
        "securityPolicy": "None",
        "securityMode": "NONE",
        "name": "OPC UA Listener Server",
        "showErrors": false,
        "individualCerts": false,
        "publicCertificateFile": "",
        "privateKeyFile": "",
        "defaultSecureTokenLifetime": "",
        "endpointMustExist": false,
        "autoSelectRightEndpoint": false,
        "strategyMaxRetry": "",
        "strategyInitialDelay": "",
        "strategyMaxDelay": "",
        "strategyRandomisationFactor": "",
        "requestedSessionTimeout": "",
        "connectionStartDelay": "",
        "reconnectDelay": "",
        "maxBadSessionRequests": "10"
    },
    {
        "id": "e1bedbc081c9cd0e",
        "type": "mqtt-broker",
        "name": "iom.tknika.eus",
        "broker": "130.130.130.252",
        "port": "1883",
        "tls": "db250659a0cdf920",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "6e6ec55198a75ae4",
        "type": "ui_tab",
        "name": "Sentsorea eta Eragilea",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "85b882d2c00db4ba",
        "type": "ui_group",
        "name": "Sentsorea",
        "tab": "6e6ec55198a75ae4",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5d0275139919f525",
        "type": "ui_group",
        "name": "Eragilea",
        "tab": "6e6ec55198a75ae4",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d87e8fc140432eb8",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "1200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "28b46aacce6ba8bb",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Process write info",
        "func": "var items = env.get(\"NODES\") || [];\n\npayload = msg.payload;\naddressSpaceItems = []\nvaluesToWrite = []\n\nObject.keys(payload).forEach(function(key) {\n    uaNode = items.filter(node => node.name === key);\n    if (uaNode.length == 1) {\n        addressSpaceItems.push(uaNode[0]);\n        valuesToWrite.push(payload[key]);\n    } else {\n        node.error(\"NodeID not found for: \" + key);\n    }\n})\n\nmsg.topic = \"\"\nmsg.payload = \"\"\nmsg.nodetype = \"inject\"\nmsg.injectType = \"write\"\n\nmsg.addressSpaceItems = addressSpaceItems;\nmsg.valuesToWrite = valuesToWrite;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 900,
        "wires": [
            [
                "5a8fece96eadafdd"
            ]
        ]
    },
    {
        "id": "5a8fece96eadafdd",
        "type": "OPCUA-IIoT-Write",
        "z": "638ad1f5c0f9d4e9",
        "connector": "37bccea6f2f03d08",
        "name": "Writer",
        "justValue": false,
        "showStatusActivities": false,
        "showErrors": true,
        "x": 810,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "7853b8b71d5f70c0",
        "type": "OPCUA-IIoT-Read",
        "z": "638ad1f5c0f9d4e9",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "37bccea6f2f03d08",
        "name": "Checker",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": false,
        "parseStrings": false,
        "historyDays": 1,
        "serverMaxItemsToRead": 1000,
        "x": 800,
        "y": 740,
        "wires": [
            [
                "4d8f0e0ddaaa2cf3"
            ]
        ]
    },
    {
        "id": "b1de12bdb09a80c9",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Check Data",
        "func": "currentTimeItem = [\n    { \n        \"name\": \"CurrentTime\", \n        \"nodeId\": \n        \"ns=0;i=2258\" \n    }\n]\n\nmsg = {};\n\nmsg.topic = \"\";\nmsg.nodetype = \"inject\";\nmsg.injectType = \"read\";\nmsg.addressSpaceItems = currentTimeItem;\nmsg.payload = \"\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 740,
        "wires": [
            [
                "7853b8b71d5f70c0"
            ]
        ]
    },
    {
        "id": "75c43c23f7bb0322",
        "type": "status",
        "z": "638ad1f5c0f9d4e9",
        "name": "Checker Status",
        "scope": [
            "7853b8b71d5f70c0"
        ],
        "x": 140,
        "y": 740,
        "wires": [
            [
                "859ca1a839cddc7f"
            ]
        ]
    },
    {
        "id": "859ca1a839cddc7f",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Checker connect handler",
        "func": "const status = msg.status.text;\n\nflow.set(\"checker_active\", status == \"active\");\n\nfunction onTimeout() {\n    flow.set(\"check_error_detected\", true);\n    // Change delay and force reConnect execution\n    flow.set(\"check_delay_ms\", 50);\n    setTimeout(check_command, 0);\n}\n\nfunction check_command() {\n    check_delay_ms = flow.get(\"check_delay_ms\");\n    active = flow.get(\"checker_active\");\n    if (active) {\n        setTimeout(check_command, check_delay_ms);\n        if (!flow.get(\"check_error_detected\")) {\n            check_timeout_ms = flow.get(\"check_timeout_ms\");\n            flow.set(\"check_timer\", setTimeout(onTimeout, check_timeout_ms));\n        }\n        node.send(msg);\n    }\n}\n\n// First execution when the node is connected (active)\nif (flow.get(\"checker_active\")) {\n    flow.set(\"check_delay_ms\", flow.get(\"default_check_delay_ms\"));\n    initial_check_delay_ms = flow.get(\"initial_check_delay_ms\");\n    setTimeout(check_command, initial_check_delay_ms);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n\nINITIAL_CHECK_DELAY_MS = 500;\nDEFAULT_CHECK_DELAY_MS = 10000;\nCHECK_TIMEOUT_MS = 1500;\n\nflow.set(\"default_check_delay_ms\", DEFAULT_CHECK_DELAY_MS);\nflow.set(\"check_delay_ms\", DEFAULT_CHECK_DELAY_MS);\nflow.set(\"initial_check_delay_ms\", INITIAL_CHECK_DELAY_MS);\nflow.set(\"check_timeout_ms\", CHECK_TIMEOUT_MS);\nflow.set(\"check_error_detected\", false);\nflow.set(\"check_timer\", null);",
        "finalize": "",
        "x": 370,
        "y": 740,
        "wires": [
            [
                "b1de12bdb09a80c9"
            ]
        ]
    },
    {
        "id": "cda1db1afbcd14eb",
        "type": "comment",
        "z": "638ad1f5c0f9d4e9",
        "name": "Periodic checker",
        "info": "",
        "x": 140,
        "y": 700,
        "wires": []
    },
    {
        "id": "4d8f0e0ddaaa2cf3",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Cancel timer",
        "func": "timer = flow.get(\"check_timer\");\n\n// Make the error_detected flag false\nflow.set(\"check_error_detected\", false);\n\n// Cancel the timer if it's active\nif (timer !== null) {\n    clearTimeout(timer);\n}",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 990,
        "y": 740,
        "wires": []
    },
    {
        "id": "3ffce8bb6a94b9dc",
        "type": "OPCUA-IIoT-Listener",
        "z": "638ad1f5c0f9d4e9",
        "connector": "37bccea6f2f03d08",
        "action": "subscribe",
        "queueSize": "1",
        "name": "",
        "topic": "",
        "justValue": true,
        "useGroupItems": false,
        "showStatusActivities": false,
        "showErrors": false,
        "x": 800,
        "y": 420,
        "wires": [
            [
                "6fc12c0c22e71e34"
            ]
        ]
    },
    {
        "id": "70d11b28fa1482c0",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Listener Data",
        "func": "var publishInterval = env.get(\"PUB_INTERVAL\") || 1000;\nvar refreshInterval = env.get(\"REFRESH_INTERVAL\") || 1000;\nvar queueSize = Math.ceil(publishInterval/refreshInterval);\nvar items = env.get(\"NODES\") || [];\n\nmsg.topic = \"\";\nmsg.nodetype = \"inject\";\nmsg.injectType = \"listen\";\nmsg.payload = {\n        \"interval\": refreshInterval,\n        \"queueSize\": queueSize,\n        \"options\": {\n            \"requestedPublishingInterval\": publishInterval,\n            \"requestedLifetimeCount\": 60,\n            \"requestedMaxKeepAliveCount\": 10,\n            \"maxNotificationsPerPublish\": 100,\n            \"publishingEnabled\": true,\n            \"priority\": 8\n        }\n};\nmsg.addressSpaceItems = items;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 420,
        "wires": [
            [
                "3ffce8bb6a94b9dc"
            ]
        ]
    },
    {
        "id": "b221e14cc7aa44c8",
        "type": "status",
        "z": "638ad1f5c0f9d4e9",
        "name": "Listener Status",
        "scope": [
            "3ffce8bb6a94b9dc"
        ],
        "x": 140,
        "y": 420,
        "wires": [
            [
                "1d0a337b0066a766",
                "24ec687a7eee7d14"
            ]
        ]
    },
    {
        "id": "1d0a337b0066a766",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Listener connect handler",
        "func": "const status = msg.status.text;\n\nif (status == \"active\") {\n    const nodes = env.get(\"NODES\") || [];\n    // If any NODE defined, consider listening = false\n    // If NODES empty, consider listening = true\n    flow.set(\"listener_listening\", nodes.length == 0);\n} else if (status.includes(\"listening\")) {\n    flow.set(\"listener_listening\", true);\n}\n\nfunction listen_command() {\n    listening = flow.get(\"listener_listening\");\n    if (!listening) {\n        listener_delay_ms = flow.get(\"listener_delay_ms\");\n        setTimeout(listen_command, listener_delay_ms);\n        node.send(msg);\n    }\n}\n\nif (!flow.get(\"listener_listening\")) {\n    initial_listener_delay_ms = flow.get(\"initial_listener_delay_ms\");\n    setTimeout(listen_command, initial_listener_delay_ms);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n\nINITIAL_LISTENER_DELAY_MS = 500;\nDEFAULT_LISTENER_DELAY_MS = 2000;\n\nflow.set(\"listener_listening\", false);\nflow.set(\"listener_delay_ms\", DEFAULT_LISTENER_DELAY_MS);\nflow.set(\"initial_listener_delay_ms\", INITIAL_LISTENER_DELAY_MS);",
        "finalize": "",
        "x": 370,
        "y": 420,
        "wires": [
            [
                "70d11b28fa1482c0"
            ]
        ]
    },
    {
        "id": "828d8cb3eb6d91cd",
        "type": "comment",
        "z": "638ad1f5c0f9d4e9",
        "name": "Register and reconnect listeners",
        "info": "",
        "x": 190,
        "y": 380,
        "wires": []
    },
    {
        "id": "f87d3c46d3a4aa5f",
        "type": "OPCUA-IIoT-Flex-Connector",
        "z": "638ad1f5c0f9d4e9",
        "name": "Server",
        "showStatusActivities": false,
        "showErrors": false,
        "connector": "37bccea6f2f03d08",
        "x": 810,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c615a6a601d967db",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Server data",
        "func": "var host = env.get(\"SERVER_HOST\") || \"localhost\";\nvar port = env.get(\"SERVER_PORT\") || 4840;\nvar secPolicy = env.get(\"SEC_POLICY\") || \"None\";\nvar secMode = env.get(\"SEC_MODE\") || \"NONE\";\n\nvar endpoint = \"opc.tcp://\" + host + \":\" + port;\n\nmsg.payload = {\n    \"discoveryUrl\": null,\n    \"endpoint\": endpoint,\n    \"keepSessionAlive\": false,\n    \"name\": \"Docker Server\",\n    \"showErrors\": false,\n    \"publicCertificateFile\": \"\",\n    \"privateKeyFile\": \"\",\n    \"defaultSecureTokenLifetime\": \"60000\",\n    \"endpointMustExist\": false,\n    \"autoSelectRightEndpoint\": true,\n    \"strategyMaxRetry\": 0,\n    \"strategyInitialDelay\": 0,\n    \"strategyMaxDelay\": 0,\n    \"strategyRandomisationFactor\": 0,\n    \"requestedSessionTimeout\": 0,\n    \"connectionStartDelay\": 0,\n    \"reconnectDelay\": 100\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 260,
        "wires": [
            [
                "f87d3c46d3a4aa5f"
            ]
        ]
    },
    {
        "id": "0ddb9d13c7b3aadf",
        "type": "inject",
        "z": "638ad1f5c0f9d4e9",
        "name": "First start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "e19f14d545193c14",
                "20f96508837c621b"
            ]
        ]
    },
    {
        "id": "ee36d3cf7da78761",
        "type": "status",
        "z": "638ad1f5c0f9d4e9",
        "name": "Server Status",
        "scope": [
            "f87d3c46d3a4aa5f"
        ],
        "x": 130,
        "y": 260,
        "wires": [
            [
                "48cc7b71e28ce257",
                "08d7524a1805458c"
            ]
        ]
    },
    {
        "id": "48cc7b71e28ce257",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Server connect handler",
        "func": "const status = msg.status.text;\n\nflow.set(\"server_active\", status == \"active\");\n\nfunction server_command() {\n    active = flow.get(\"server_active\");\n    if (!active) {\n        server_delay_ms = flow.get(\"server_delay_ms\");\n        setTimeout(server_command, server_delay_ms);\n        node.send(msg);\n    }\n}\n\nif (!flow.get(\"server_active\")) {\n    initial_server_delay_ms = flow.get(\"initial_server_delay_ms\");\n    setTimeout(server_command, initial_server_delay_ms);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n\nINITIAL_SERVER_DELAY_MS = 500;\nDEFAULT_SERVER_DELAY_MS = 10000;\n\nflow.set(\"server_active\", false);\nflow.set(\"server_delay_ms\", DEFAULT_SERVER_DELAY_MS);\nflow.set(\"initial_server_delay_ms\", INITIAL_SERVER_DELAY_MS);",
        "finalize": "",
        "x": 370,
        "y": 260,
        "wires": [
            [
                "c615a6a601d967db"
            ]
        ]
    },
    {
        "id": "98dc21348b8fc912",
        "type": "comment",
        "z": "638ad1f5c0f9d4e9",
        "name": "Start and reconnect server",
        "info": "",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "eb97a0532713b56e",
        "type": "comment",
        "z": "638ad1f5c0f9d4e9",
        "name": "Writer",
        "info": "",
        "x": 110,
        "y": 860,
        "wires": []
    },
    {
        "id": "e19f14d545193c14",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "nodeId -> name mapping",
        "func": "var items = env.get(\"NODES\") || [];\n\nnodeId2name = {};\n\nitems.forEach(element => {\n    nodeId = element.nodeId;\n    const name = element.name;\n    nodeId2name[nodeId] = name;\n});\n\nflow.set(\"nodeId2name\", nodeId2name);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 100,
        "wires": [
            [
                "c615a6a601d967db"
            ]
        ]
    },
    {
        "id": "2c47be2406a5bcaa",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Subflow state",
        "func": "var subflow_status_timer = context.get(\"subflow_status_timer\");\nconst subflow_status_timeout_ms = context.get(\"subflow_status_timeout_ms\");\n\nif (!msg.hasOwnProperty(\"status\")) {\n    // First execution, timer must be started\n    timer = setTimeout(() =>  {\n            node.warn(\"Connection to OPC UA Server cannot be stablished, check server or configuration parameters\");\n            msg.status = {fill:\"yellow\",shape:\"dot\",text:\"Connecting... (see debug)\"};\n            node.send(msg);\n        }, subflow_status_timeout_ms);\n    context.set(\"subflow_status_timer\", timer);\n    msg = {}\n    msg.status = {fill:\"yellow\", shape:\"dot\", text:\"Connecting...\"};\n    return msg;\n} else {\n    // Real status message\n    const state = msg.status.text;\n    if (state == \"active\") {\n        // Connection done, stop the timer\n        if (subflow_status_timer !== null) {\n            clearTimeout(subflow_status_timer);\n            context.set(\"subflow_status_timer\", null);\n        }\n        return msg;\n    } else if (state.includes(\"listening\")) {\n        return msg;\n    } else {\n        node.warn(\"Server connection was lost, reconnecting...\");\n        msg.status = {fill:\"yellow\",shape:\"dot\",text:\"Reconnecting...\"};\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n\ncontext.set(\"subflow_status_timeout_ms\", 10000);\ncontext.set(\"subflow_status_timer\", null);",
        "finalize": "",
        "x": 600,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "08d7524a1805458c",
        "type": "link out",
        "z": "638ad1f5c0f9d4e9",
        "name": "Server State",
        "links": [
            "a45924c073488ab7"
        ],
        "x": 275,
        "y": 300,
        "wires": []
    },
    {
        "id": "fea853ca7a165030",
        "type": "link out",
        "z": "638ad1f5c0f9d4e9",
        "name": "Listener State",
        "links": [
            "a45924c073488ab7"
        ],
        "x": 475,
        "y": 460,
        "wires": []
    },
    {
        "id": "a45924c073488ab7",
        "type": "link in",
        "z": "638ad1f5c0f9d4e9",
        "name": "Subflow State",
        "links": [
            "20f96508837c621b",
            "08d7524a1805458c",
            "fea853ca7a165030"
        ],
        "x": 75,
        "y": 1060,
        "wires": [
            [
                "2c47be2406a5bcaa"
            ]
        ]
    },
    {
        "id": "6fc12c0c22e71e34",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Process listener result",
        "func": "// Check if subscripton has terminated\nif (msg.payload == \"SUBSCRIPTION TERMINATED\") {\n    return null;\n}\n\n// Check if addressSpaceItems exists\nif (!msg.hasOwnProperty(\"addressSpaceItems\")) {\n    node.warn(\"addressSpaceItems does not exist\");\n    return null;\n}\n\nitems = msg.addressSpaceItems;\n\n// Check addressSpaceItems length\nif (items.length != 1) {\n    return null;\n}\n\nitem = items[0];\nnodeId = item.nodeId;\n\nconst nodeId2name = flow.get('nodeId2name');\nvar name = nodeId;\nif (nodeId2name.hasOwnProperty(nodeId)) {\n    name = nodeId2name[nodeId];\n}\n\n// Check the status of justValue\nif (msg[\"justValue\"] === true) {\n    value = msg.payload.value.value\n} else {\n    value = msg.payload.dataValue.value.value;\n}\n\ndata = {}\ndata[name] = value;\n\nmsg = {}\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1020,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "2bfab15d8233abfa",
        "type": "comment",
        "z": "638ad1f5c0f9d4e9",
        "name": "Subflow status",
        "info": "",
        "x": 140,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ae5046ee5061b72c",
        "type": "OPCUA-IIoT-Read",
        "z": "638ad1f5c0f9d4e9",
        "attributeId": 0,
        "maxAge": 1,
        "depth": 1,
        "connector": "37bccea6f2f03d08",
        "name": "First Read",
        "justValue": true,
        "showStatusActivities": false,
        "showErrors": false,
        "parseStrings": false,
        "historyDays": 1,
        "serverMaxItemsToRead": 1000,
        "x": 790,
        "y": 580,
        "wires": [
            [
                "8a7fb8cdaea4552e"
            ]
        ]
    },
    {
        "id": "459cfb76a470fc79",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "First read data",
        "func": "var items = env.get(\"NODES\") || [];\n\nmsg = {};\n\nmsg.topic = \"\";\nmsg.nodetype = \"inject\";\nmsg.injectType = \"read\";\nmsg.addressSpaceItems = items;\nmsg.payload = \"\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 580,
        "wires": [
            [
                "ae5046ee5061b72c"
            ]
        ]
    },
    {
        "id": "a816f14dc31fb919",
        "type": "status",
        "z": "638ad1f5c0f9d4e9",
        "name": "First Read Status",
        "scope": [
            "ae5046ee5061b72c"
        ],
        "x": 140,
        "y": 580,
        "wires": [
            [
                "9251ac805cf29755"
            ]
        ]
    },
    {
        "id": "3d49f75759e8c1e2",
        "type": "comment",
        "z": "638ad1f5c0f9d4e9",
        "name": "First start reader",
        "info": "",
        "x": 140,
        "y": 540,
        "wires": []
    },
    {
        "id": "9251ac805cf29755",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "First read connect handler",
        "func": "const status = msg.status.text;\n\nflow.set(\"first_read_active\", status == \"active\");\n\n// Execute every time \"first_read\" changes to 'active'\nif (flow.get(\"first_read_active\")) {\n    initial_first_read_delay_ms = flow.get(\"initial_first_read_delay_ms\");\n    setTimeout(function() {\n        node.send(msg);\n    }, initial_first_read_delay_ms);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n\nINITIAL_FIRST_READ_DELAY_MS = 500;\n\nflow.set(\"first_read_active\", false);\nflow.set(\"initial_first_read_delay_ms\", INITIAL_FIRST_READ_DELAY_MS);",
        "finalize": "",
        "x": 370,
        "y": 580,
        "wires": [
            [
                "459cfb76a470fc79"
            ]
        ]
    },
    {
        "id": "8a7fb8cdaea4552e",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Process first read result",
        "func": "var nodeId2name = flow.get('nodeId2name');\n\n// Check if 'injecType' exists\nif (!msg.hasOwnProperty(\"injectType\")) {\n    return null;\n}\n\n// Check if it is a 'read' message\nif (msg.injectType != \"read\") {\n    return null;\n}\n\nif (Array.isArray(msg.payload)) {\n    msg.payload.forEach(variable => {\n        nodeId = variable.nodeId;\n        value = variable.value;\n        var name = nodeId;\n        if (nodeId2name.hasOwnProperty(nodeId)) {\n            name = nodeId2name[nodeId];\n        }\n        data = {}\n        data[name] = value;\n        msg = {}\n        msg.payload = data;\n        node.send(msg);\n    });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1030,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "716989891aacfef1",
        "type": "comment",
        "z": "638ad1f5c0f9d4e9",
        "name": "Initialization",
        "info": "",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "20f96508837c621b",
        "type": "link out",
        "z": "638ad1f5c0f9d4e9",
        "name": "Initial State",
        "links": [
            "a45924c073488ab7"
        ],
        "x": 275,
        "y": 140,
        "wires": []
    },
    {
        "id": "24ec687a7eee7d14",
        "type": "function",
        "z": "638ad1f5c0f9d4e9",
        "name": "Filter non listening",
        "func": "const state = msg.status.text;\n\nif (state.includes(\"listening\")) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 460,
        "wires": [
            [
                "fea853ca7a165030"
            ]
        ]
    },
    {
        "id": "f1a6e5d2eb358e1d",
        "type": "serial in",
        "z": "d9aefffefeeb23ae",
        "name": "Arduino",
        "serial": "d87e8fc140432eb8",
        "x": 70,
        "y": 180,
        "wires": [
            [
                "4a73851d494d18f0"
            ]
        ]
    },
    {
        "id": "4a73851d494d18f0",
        "type": "split",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "2",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "fa22a3b1ccbad3b5"
            ]
        ]
    },
    {
        "id": "ddf5e7c6c37d426a",
        "type": "json",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "86982e46014a3e44"
            ]
        ]
    },
    {
        "id": "fa22a3b1ccbad3b5",
        "type": "function",
        "z": "d9aefffefeeb23ae",
        "name": "Erase \" \" msg",
        "func": "if (msg.payload != \"\"){\nreturn msg;}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "ddf5e7c6c37d426a"
            ]
        ]
    },
    {
        "id": "86982e46014a3e44",
        "type": "switch",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "100",
                "vt": "str"
            },
            {
                "t": "gte",
                "v": "100",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 180,
        "wires": [
            [
                "1af98119504f98d8"
            ],
            [
                "687aca0469da3001"
            ]
        ]
    },
    {
        "id": "687aca0469da3001",
        "type": "range",
        "z": "d9aefffefeeb23ae",
        "minin": "100",
        "maxin": "200",
        "minout": "0",
        "maxout": "100",
        "action": "roll",
        "round": true,
        "property": "payload",
        "name": "",
        "x": 700,
        "y": 240,
        "wires": [
            [
                "6ced4ca9414ba8fb"
            ]
        ]
    },
    {
        "id": "1af98119504f98d8",
        "type": "range",
        "z": "d9aefffefeeb23ae",
        "minin": "0",
        "maxin": "100",
        "minout": "0",
        "maxout": "100",
        "action": "roll",
        "round": true,
        "property": "payload",
        "name": "",
        "x": 700,
        "y": 100,
        "wires": [
            [
                "cc273347b222201d"
            ]
        ]
    },
    {
        "id": "cc273347b222201d",
        "type": "mqtt out",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "topic": "oteitza/informatika/X",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "339fb0e9074090d2",
        "x": 900,
        "y": 100,
        "wires": []
    },
    {
        "id": "6ced4ca9414ba8fb",
        "type": "mqtt out",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "topic": "oteitza/informatika/Y",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "339fb0e9074090d2",
        "x": 900,
        "y": 240,
        "wires": []
    },
    {
        "id": "f94e4f20de0572ae",
        "type": "mqtt in",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "topic": "oteitza/informatika/X",
        "qos": "2",
        "datatype": "auto",
        "broker": "339fb0e9074090d2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 340,
        "wires": [
            [
                "e580d5b18b4aae21",
                "4bb2432ed21e46e8",
                "948793ee9623cc78"
            ]
        ]
    },
    {
        "id": "cfcf2bed4f81d58b",
        "type": "mqtt in",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "topic": "oteitza/informatika/Y",
        "qos": "2",
        "datatype": "auto",
        "broker": "339fb0e9074090d2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 460,
        "wires": [
            [
                "f973b0cc907b1849",
                "6b3cd415c0668b7b",
                "b13e683e0fa604ab"
            ]
        ]
    },
    {
        "id": "e580d5b18b4aae21",
        "type": "ui_text",
        "z": "d9aefffefeeb23ae",
        "group": "85b882d2c00db4ba",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sentsorea %",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 430,
        "y": 300,
        "wires": []
    },
    {
        "id": "4bb2432ed21e46e8",
        "type": "ui_gauge",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "group": "85b882d2c00db4ba",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Sentsorea Gauge",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "33",
        "seg2": "66",
        "className": "",
        "x": 450,
        "y": 340,
        "wires": []
    },
    {
        "id": "948793ee9623cc78",
        "type": "ui_chart",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "group": "85b882d2c00db4ba",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Sentsorea %",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 430,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f973b0cc907b1849",
        "type": "ui_text",
        "z": "d9aefffefeeb23ae",
        "group": "5d0275139919f525",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sentsorea %",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 430,
        "y": 440,
        "wires": []
    },
    {
        "id": "6b3cd415c0668b7b",
        "type": "ui_gauge",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "group": "5d0275139919f525",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Sentsorea Gauge",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "33",
        "seg2": "66",
        "className": "",
        "x": 450,
        "y": 480,
        "wires": []
    },
    {
        "id": "b13e683e0fa604ab",
        "type": "ui_chart",
        "z": "d9aefffefeeb23ae",
        "name": "",
        "group": "5d0275139919f525",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Sentsorea %",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 430,
        "y": 520,
        "wires": [
            []
        ]
    }
]
